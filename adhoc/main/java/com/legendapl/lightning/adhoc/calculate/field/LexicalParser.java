/* The following code was generated by JFlex 1.6.1 */

package com.legendapl.lightning.adhoc.calculate.field;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.legendapl.lightning.adhoc.common.AdhocUtils;
import com.legendapl.lightning.adhoc.model.Field;
import com.legendapl.lightning.adhoc.service.AlertWindowService;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.6.1 from the specification file <tt>test.jflex</tt>
 */
public class LexicalParser implements Iterator<LexicalToken> {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\24\1\24\1\71\1\71\1\71\22\0\1\24\1\67\1\2"
			+ "\2\0\1\60\1\0\1\3\1\62\1\63\1\55\1\56\1\54\1\57" + "\1\4\1\61\12\1\1\70\1\0\1\65\1\64\1\66\2\0\1\6"
			+ "\1\52\1\50\1\12\1\40\1\51\1\0\1\46\1\20\2\0\1\36" + "\1\33\1\10\1\14\1\0\1\44\1\16\1\45\1\22\2\0\1\42"
			+ "\1\0\1\35\7\0\1\5\1\27\1\47\1\11\1\30\1\53\1\37" + "\1\34\1\17\1\0\1\43\1\26\1\32\1\7\1\13\1\41\1\0"
			+ "\1\15\1\23\1\21\1\25\3\0\1\31\13\0\1\71\u1fa2\0\1\71"
			+ "\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\15\1\1\3\10\1\1\4\1\5"
			+ "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14" + "\1\15\1\1\1\16\1\17\3\0\1\20\6\0\1\21"
			+ "\1\0\2\22\1\0\1\23\16\0\1\24\1\25\1\26" + "\1\27\1\30\1\31\1\32\1\0\1\33\1\34\13\0"
			+ "\1\35\11\0\1\36\5\0\1\37\1\40\1\0\1\41" + "\1\0\1\42\14\0\1\43\2\0\1\44\11\0\1\45"
			+ "\5\0\1\46\2\0\1\47\7\0\1\50\1\0\1\51" + "\1\52\10\0\1\53\1\54\4\0\1\55\10\0\1\56"
			+ "\1\0\1\57\1\60\1\61\25\0\1\62\1\0\1\63" + "\1\64\10\0\1\65\2\0\1\66\1\67\1\0\1\70"
			+ "\1\0\1\71\1\72\3\0\1\73\1\0\1\74\1\75";

	private static int[] zzUnpackAction() {
		int[] result = new int[236];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"
			+ "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"
			+ "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"
			+ "\0\u0570\0\72\0\72\0\72\0\72\0\72\0\72\0\72" + "\0\72\0\u05aa\0\u05e4\0\u061e\0\u0658\0\72\0\72\0\u0692"
			+ "\0\u06cc\0\350\0\72\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"
			+ "\0\u0828\0\72\0\u0862\0\72\0\u089c\0\u08d6\0\72\0\u0910"
			+ "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"
			+ "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\72\0\72\0\72"
			+ "\0\72\0\u0692\0\72\0\72\0\u0c3c\0\72\0\72\0\u0c76"
			+ "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"
			+ "\0\u0e80\0\u0eba\0\72\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"
			+ "\0\u1016\0\u1050\0\u108a\0\u10c4\0\72\0\u10fe\0\u1138\0\u1172"
			+ "\0\u11ac\0\u11e6\0\72\0\72\0\u1220\0\u125a\0\u1294\0\72"
			+ "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"
			+ "\0\u149e\0\u14d8\0\u1512\0\u154c\0\72\0\u1586\0\u15c0\0\72"
			+ "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"
			+ "\0\u17ca\0\72\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\72"
			+ "\0\u1926\0\u1960\0\72\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"
			+ "\0\u1abc\0\u1af6\0\72\0\u1b30\0\72\0\72\0\u1b6a\0\u1ba4"
			+ "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\72\0\72"
			+ "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\72\0\u1e22\0\u1e5c\0\u1e96"
			+ "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\72\0\u1ff2\0\72"
			+ "\0\72\0\72\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"
			+ "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"
			+ "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\72"
			+ "\0\u24ee\0\72\0\72\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"
			+ "\0\u264a\0\u2684\0\u26be\0\72\0\u26f8\0\u2732\0\72\0\72"
			+ "\0\u276c\0\72\0\u27a6\0\72\0\72\0\u27e0\0\u281a\0\u2854" + "\0\72\0\u288e\0\72\0\72";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[236];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\2\10"
			+ "\1\11\1\12\2\13\1\2\1\14\1\15\1\16\1\17" + "\1\20\1\2\1\21\6\2\1\22\1\2\1\23\1\24"
			+ "\1\2\1\25\4\2\1\26\2\2\1\27\1\2\1\30" + "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"
			+ "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\73\0" + "\1\3\2\0\1\50\65\0\2\51\1\0\67\51\3\52"
			+ "\1\53\66\52\7\0\2\54\70\0\2\54\16\0\1\55" + "\55\0\2\56\60\0\1\57\73\0\1\60\22\0\1\61"
			+ "\56\0\2\62\66\0\1\63\65\0\2\64\70\0\1\65" + "\1\64\12\0\1\66\25\0\1\67\35\0\1\70\5\0"
			+ "\1\71\61\0\1\72\3\0\1\73\76\0\1\21\60\0" + "\1\74\3\0\1\75\102\0\1\76\71\0\1\77\50\0"
			+ "\1\100\16\0\1\101\64\0\1\102\63\0\1\103\71\0" + "\1\104\63\0\1\105\150\0\1\106\71\0\1\107\71\0"
			+ "\1\110\71\0\1\111\6\0\1\112\70\0\2\51\1\113" + "\67\51\11\0\2\114\102\0\1\115\67\0\2\116\47\0"
			+ "\3\57\1\117\66\57\21\0\1\120\7\0\1\121\107\0" + "\1\122\47\0\1\123\65\0\1\124\60\0\1\125\106\0"
			+ "\1\126\47\0\1\127\77\0\1\130\112\0\1\131\46\0" + "\1\132\73\0\1\133\65\0\1\134\73\0\1\135\73\0"
			+ "\1\136\65\0\1\137\71\0\1\140\73\0\1\141\75\0" + "\1\142\104\0\1\143\56\0\1\144\106\0\1\145\51\0"
			+ "\1\146\100\0\1\147\61\0\1\150\112\0\1\151\66\0" + "\1\152\74\0\1\153\41\0\3\127\1\154\66\127\5\0"
			+ "\1\155\114\0\1\156\62\0\1\157\65\0\1\160\113\0" + "\1\161\55\0\1\162\107\0\1\163\45\0\1\164\75\0"
			+ "\1\165\25\0\1\166\50\0\1\167\66\0\1\170\74\0" + "\1\171\50\0\1\172\17\0\1\173\76\0\1\174\50\0"
			+ "\1\175\117\0\1\176\60\0\1\177\74\0\1\200\63\0" + "\1\201\102\0\1\202\56\0\1\203\112\0\1\204\52\0"
			+ "\1\205\67\0\1\206\55\0\1\207\71\0\1\210\114\0" + "\1\211\71\0\1\212\66\0\1\213\76\0\1\214\71\0"
			+ "\1\215\44\0\1\216\114\0\1\217\67\0\1\220\64\0" + "\1\221\60\0\1\222\115\0\1\223\54\0\1\224\102\0"
			+ "\1\225\64\0\1\226\65\0\1\227\73\0\1\230\55\0" + "\1\231\105\0\1\232\100\0\1\233\70\0\1\234\70\0"
			+ "\1\235\60\0\1\236\61\0\1\237\71\0\1\240\17\0" + "\1\241\65\0\1\242\61\0\1\243\122\0\1\244\36\0"
			+ "\1\245\112\0\1\246\50\0\1\247\112\0\1\250\71\0" + "\1\251\73\0\1\252\71\0\1\253\71\0\1\254\73\0"
			+ "\1\255\47\0\1\256\20\0\1\257\1\0\1\260\4\0" + "\1\261\1\0\1\262\1\263\1\264\42\0\1\265\75\0"
			+ "\1\266\55\0\1\267\77\0\1\270\115\0\1\271\60\0" + "\1\272\70\0\1\273\47\0\1\274\77\0\1\275\3\0"
			+ "\1\276\102\0\1\277\71\0\1\300\66\0\1\301\74\0" + "\1\302\54\0\1\303\77\0\1\304\55\0\1\305\114\0"
			+ "\1\306\72\0\1\307\47\0\1\310\71\0\1\311\67\0" + "\1\312\114\0\1\313\46\0\1\314\116\0\1\315\14\0"
			+ "\1\316\47\0\1\317\100\0\1\320\56\0\1\321\65\0" + "\1\322\77\0\1\323\67\0\1\324\75\0\1\325\61\0"
			+ "\1\326\117\0\1\327\43\0\1\330\73\0\1\331\65\0" + "\1\332\73\0\1\333\104\0\1\334\75\0\1\335\56\0"
			+ "\1\336\73\0\1\337\71\0\1\340\67\0\1\341\73\0" + "\1\342\55\0\1\343\105\0\1\344\71\0\1\345\76\0"
			+ "\1\346\71\0\1\347\52\0\1\350\103\0\1\351\63\0" + "\1\352\77\0\1\353\71\0\1\354\46\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[10440];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\27\1\10\11\4\1\2\11\3\0\1\11"
			+ "\6\0\1\11\1\0\1\11\1\1\1\0\1\11\16\0" + "\4\11\1\1\2\11\1\0\2\11\13\0\1\11\11\0"
			+ "\1\11\5\0\2\11\1\0\1\1\1\0\1\11\14\0" + "\1\11\2\0\1\11\11\0\1\11\5\0\1\11\2\0"
			+ "\1\11\7\0\1\11\1\0\2\11\10\0\2\11\4\0" + "\1\11\10\0\1\11\1\0\3\11\25\0\1\11\1\0"
			+ "\2\11\10\0\1\11\2\0\2\11\1\0\1\11\1\0" + "\2\11\3\0\1\11\1\0\2\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[236];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */

	public static class NoSuchFieldException extends RuntimeException {
		/**
		*
		*/
		private static final long serialVersionUID = 1L;

		NoSuchFieldException(String s) {
			super(s);
		}

		NoSuchFieldException() {
			super();
		}
	}

	public static class InvaildSymbolException extends RuntimeException {
		/**
		*
		*/
		private static final long serialVersionUID = 1L;

		InvaildSymbolException(String s) {
			super(s);
		}

		InvaildSymbolException() {
			super();
		}
	}

	private Map<String, Field> label2Field;

	private List<LexicalToken> words = new ArrayList<>();

	private List<String> subFields = new ArrayList<>();

	private int currentIndex = 0;

	public List<String> getSubFields() {
		return subFields;
	}

	public LexicalParser(Map<String, Field> label2Field) {
		this.label2Field = label2Field;
	}

	public void lexicalParse(String sentence) {
		words.clear();
		currentIndex = 0;
		subFields.clear();
		zzAtEOF = false;
		this.zzReader = new StringReader(sentence);
		while (!zzAtEOF) {
			try {
				yylex();
			} catch (Exception e) {
				AdhocUtils.logger.error(e.getMessage(), e);
				AlertWindowService.showError(AdhocUtils.getString("SQL_EXECUTE_ERROR"), e.getMessage());
			}
		}
	}

	@Override
	public boolean hasNext() {
		return words.size() > currentIndex;
	}

	@Override
	public LexicalToken next() {
		return words.get(currentIndex++);
	}

	/**
	 * Creates a new scanner
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public LexicalParser(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 196) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 *
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			/*
			 * If numRead == requested, we might have requested to few chars to
			 * encode a full Unicode character. We assume that a Reader would
			 * otherwise never return half characters.
			 */
			if (numRead == requested) {
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has
	 * grown.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public int yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				return YYEOF;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 1: {
					throw new NoSuchFieldException(yytext());
				}
				case 62:
					break;
				case 2: {
					words.add(new LexicalToken(LexicalType.INT, yytext()));
				}
				case 63:
					break;
				case 3: {
				}
				case 64:
					break;
				case 4: {
					words.add(new LexicalToken(LexicalType.COMMA, null));
				}
				case 65:
					break;
				case 5: {
					words.add(new LexicalToken(LexicalType.MULTIS, null));
				}
				case 66:
					break;
				case 6: {
					words.add(new LexicalToken(LexicalType.PLUS, null));
				}
				case 67:
					break;
				case 7: {
					words.add(new LexicalToken(LexicalType.MINUS, null));
				}
				case 68:
					break;
				case 8: {
					words.add(new LexicalToken(LexicalType.PECENT, null));
				}
				case 69:
					break;
				case 9: {
					words.add(new LexicalToken(LexicalType.DIVIDE, null));
				}
				case 70:
					break;
				case 10: {
					words.add(new LexicalToken(LexicalType.LEFT_PAREN, null));
				}
				case 71:
					break;
				case 11: {
					words.add(new LexicalToken(LexicalType.RT_PAREN, null));
				}
				case 72:
					break;
				case 12: {
					words.add(new LexicalToken(LexicalType.LESS, null));
				}
				case 73:
					break;
				case 13: {
					words.add(new LexicalToken(LexicalType.GTR, null));
				}
				case 74:
					break;
				case 14: {
					words.add(new LexicalToken(LexicalType.COLON, null));
				}
				case 75:
					break;
				case 15: {
					System.out.print(yytext());
				}
				case 76:
					break;
				case 16: {
					words.add(new LexicalToken(LexicalType.CHARS, yytext().subSequence(1, yytext().length() - 1)));
				}
				case 77:
					break;
				case 17: {
					words.add(new LexicalToken(LexicalType.OR, null));
				}
				case 78:
					break;
				case 18: {
					words.add(new LexicalToken(LexicalType.IN, null));
				}
				case 79:
					break;
				case 19: {
					words.add(new LexicalToken(LexicalType.IF, null));
				}
				case 80:
					break;
				case 20: {
					words.add(new LexicalToken(LexicalType.EQ, null));
				}
				case 81:
					break;
				case 21: {
					words.add(new LexicalToken(LexicalType.LESS_EQ, null));
				}
				case 82:
					break;
				case 22: {
					words.add(new LexicalToken(LexicalType.GTR_EQ, null));
				}
				case 83:
					break;
				case 23: {
					words.add(new LexicalToken(LexicalType.NOT_EQ, null));
				}
				case 84:
					break;
				case 24: {
					words.add(new LexicalToken(LexicalType.REAL, yytext()));
				}
				case 85:
					break;
				case 25: {
					if (label2Field.get(yytext().subSequence(1, yytext().length() - 1)) != null) {
						words.add(new LexicalToken(LexicalType.FIELDNAME,
								yytext().subSequence(1, yytext().length() - 1)));
						subFields.add(label2Field.get(yytext().subSequence(1, yytext().length() - 1)).getResourceId());
					} else {
						throw new NoSuchFieldException(yytext());
					}
				}
				case 86:
					break;
				case 26: {
					words.add(new LexicalToken(LexicalType.AND, null));
				}
				case 87:
					break;
				case 27: {
					words.add(new LexicalToken(LexicalType.NOT, null));
				}
				case 88:
					break;
				case 28: {
					words.add(new LexicalToken(LexicalType.DateType, null));
					words.add(new LexicalToken(LexicalType.LEFT_PAREN, null));
					words.add(new LexicalToken(LexicalType.CHARS, yytext().subSequence(2, yytext().length() - 1)));
					words.add(new LexicalToken(LexicalType.RT_PAREN, null));
				}
				case 89:
					break;
				case 29: {
					words.add(new LexicalToken(LexicalType.Mid, null));
				}
				case 90:
					break;
				case 30: {
					words.add(new LexicalToken(LexicalType.DateType, null));
				}
				case 91:
					break;
				case 31: {
					words.add(new LexicalToken(LexicalType.TRUE, null));
				}
				case 92:
					break;
				case 32: {
					words.add(new LexicalToken(LexicalType.TimestampType, null));
					words.add(new LexicalToken(LexicalType.LEFT_PAREN, null));
					words.add(new LexicalToken(LexicalType.CHARS, yytext().subSequence(3, yytext().length() - 1)));
					words.add(new LexicalToken(LexicalType.RT_PAREN, null));
				}
				case 93:
					break;
				case 33: {
					words.add(new LexicalToken(LexicalType.TimeType, null));
				}
				case 94:
					break;
				case 34: {
					words.add(new LexicalToken(LexicalType.Year, null));
				}
				case 95:
					break;
				case 35: {
					words.add(new LexicalToken(LexicalType.Round, null));
				}
				case 96:
					break;
				case 36: {
					words.add(new LexicalToken(LexicalType.Today, null));
				}
				case 97:
					break;
				case 37: {
					words.add(new LexicalToken(LexicalType.FALSE, null));
				}
				case 98:
					break;
				case 38: {
					words.add(new LexicalToken(LexicalType.IsNull, null));
				}
				case 99:
					break;
				case 39: {
					words.add(new LexicalToken(LexicalType.Length, null));
				}
				case 100:
					break;
				case 40: {
					words.add(new LexicalToken(LexicalType.DayName, null));
				}
				case 101:
					break;
				case 41: {
					words.add(new LexicalToken(LexicalType.DecimalType, null));
				}
				case 102:
					break;
				case 42: {
					words.add(new LexicalToken(LexicalType.IntegerType, null));
				}
				case 103:
					break;
				case 43: {
					words.add(new LexicalToken(LexicalType.BooleanType, null));
				}
				case 104:
					break;
				case 44: {
					words.add(new LexicalToken(LexicalType.Absolute, null));
				}
				case 105:
					break;
				case 45: {
					words.add(new LexicalToken(LexicalType.EndsWith, null));
				}
				case 106:
					break;
				case 46: {
					words.add(new LexicalToken(LexicalType.Contains, null));
				}
				case 107:
					break;
				case 47: {
					words.add(new LexicalToken(LexicalType.DayNumber, null));
				}
				case 108:
					break;
				case 48: {
					words.add(new LexicalToken(LexicalType.TimestampType, null));
				}
				case 109:
					break;
				case 49: {
					words.add(new LexicalToken(LexicalType.MonthName, null));
				}
				case 110:
					break;
				case 50: {
					words.add(new LexicalToken(LexicalType.StartsWith, null));
				}
				case 111:
					break;
				case 51: {
					words.add(new LexicalToken(LexicalType.MonthNumber, null));
				}
				case 112:
					break;
				case 52: {
					words.add(new LexicalToken(LexicalType.ElapsedDays, null));
				}
				case 113:
					break;
				case 53: {
					words.add(new LexicalToken(LexicalType.Concatenate, null));
				}
				case 114:
					break;
				case 54: {
					words.add(new LexicalToken(LexicalType.ElapsedYears, null));
				}
				case 115:
					break;
				case 55: {
					words.add(new LexicalToken(LexicalType.ElapsedWeeks, null));
				}
				case 116:
					break;
				case 56: {
					words.add(new LexicalToken(LexicalType.ElapsedSemis, null));
				}
				case 117:
					break;
				case 57: {
					words.add(new LexicalToken(LexicalType.ElapsedHours, null));
				}
				case 118:
					break;
				case 58: {
					words.add(new LexicalToken(LexicalType.ElapsedMonths, null));
				}
				case 119:
					break;
				case 59: {
					words.add(new LexicalToken(LexicalType.ElapsedMinutes, null));
				}
				case 120:
					break;
				case 60: {
					words.add(new LexicalToken(LexicalType.ElapsedSeconds, null));
				}
				case 121:
					break;
				case 61: {
					words.add(new LexicalToken(LexicalType.ElapsedQuarters, null));
				}
				case 122:
					break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Runs the scanner on input files.
	 *
	 * This is a standalone scanner, it will print any unmatched text to
	 * System.out unchanged.
	 *
	 * @param argv
	 *            the command line, contains the filenames to run the scanner
	 *            on.
	 */
	public static void main(String argv[]) {
		if (argv.length == 0) {
			System.out.println("Usage : java LexicalParser [ --encoding <name> ] <inputfile(s)>");
		} else {
			int firstFilePos = 0;
			String encodingName = "UTF-8";
			if (argv[0].equals("--encoding")) {
				firstFilePos = 2;
				encodingName = argv[1];
				try {
					java.nio.charset.Charset.forName(encodingName); // Side-effect:
																	// is
																	// encodingName
																	// valid?
				} catch (Exception e) {
					System.out.println("Invalid encoding '" + encodingName + "'");
					return;
				}
			}
			for (int i = firstFilePos; i < argv.length; i++) {
				LexicalParser scanner = null;
				try {
					java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
					java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
					scanner = new LexicalParser(reader);
					while (!scanner.zzAtEOF)
						scanner.yylex();
				} catch (java.io.FileNotFoundException e) {
					System.out.println("File not found : \"" + argv[i] + "\"");
				} catch (java.io.IOException e) {
					System.out.println("IO error scanning file \"" + argv[i] + "\"");
					System.out.println(e);
				} catch (Exception e) {
					System.out.println("Unexpected exception:");
					e.printStackTrace();
				}
			}
		}
	}

}
